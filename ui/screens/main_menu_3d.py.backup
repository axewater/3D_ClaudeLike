"""
3D Main Menu Screen

Main menu with animated star tunnel background and navigation buttons.
Matches the 2D version's aesthetic with Ursina implementation.
"""

from ursina import Entity, camera, color, Text, Button, Vec3, time as ursina_time, destroy
import math
import random
from typing import List
from audio import get_audio_manager


class Star:
    """Individual star in the tunnel with motion and depth"""
    def __init__(self):
        # Cylindrical distribution for tunnel effect
        angle = random.uniform(0, 2 * math.pi)
        radius = random.uniform(0, 18)  # Max radius from center

        self.x = radius * math.cos(angle)
        self.y = radius * math.sin(angle)
        self.z = random.uniform(-60, -5)  # Depth range

        # Store base position for rotation
        self.base_x = self.x
        self.base_y = self.y

        # Rotation angle for spiral effect
        self.angle = random.uniform(0, 360)

        # Speed varies per star
        self.speed = random.uniform(0.8, 1.5)

        # Create entity (billboard for better visibility)
        self.entity = Entity(
            model='quad',
            scale=0.15,
            position=(self.x, self.y, self.z),
            color=color.white,
            unlit=True,
            billboard=True,  # Always face camera for visibility
            double_sided=True
        )

    def update(self, dt: float):
        """Update star position and rotation"""
        # Move toward camera
        self.z += dt * self.speed * 25

        # Rotate around Z-axis for spiral effect
        self.angle += dt * 30  # Degrees per second

        # Apply rotation
        angle_rad = math.radians(self.angle)
        radius = math.sqrt(self.base_x**2 + self.base_y**2)
        self.x = radius * math.cos(angle_rad)
        self.y = radius * math.sin(angle_rad)

        # Respawn at back when it reaches camera
        if self.z > -1:
            self.z = -60
            # Randomize position slightly on respawn
            angle = random.uniform(0, 2 * math.pi)
            radius = random.uniform(0, 18)
            self.base_x = radius * math.cos(angle)
            self.base_y = radius * math.sin(angle)
            self.angle = random.uniform(0, 360)
            self.speed = random.uniform(0.8, 1.5)

        # Calculate depth factor (0 = far, 1 = near)
        depth_factor = (self.z + 60) / 55
        depth_factor = max(0, min(1, depth_factor))

        # Size based on depth (closer = bigger) - increased base size
        size = 0.1 + depth_factor * 0.25

        # Color: Blue-white gradient based on depth (brighter!)
        base_brightness = 0.5 + depth_factor * 0.5  # Increased from 0.3
        r = base_brightness * (0.8 + depth_factor * 0.2)
        g = base_brightness * (0.8 + depth_factor * 0.2)
        b = base_brightness * (0.95 + depth_factor * 0.05)
        alpha = 1.0  # Full opacity

        # Update entity
        self.entity.position = (self.x, self.y, self.z)
        self.entity.scale = size
        self.entity.color = color.rgba(r, g, b, alpha)

    def destroy_entity(self):
        """Clean up the star entity"""
        if self.entity:
            destroy(self.entity)
            self.entity = None


class MainMenu3D(Entity):
    """
    3D Main Menu with star tunnel background.

    Buttons:
    - New Game → Class Selection
    - How to Play → Instructions overlay
    - Settings → Settings screen
    - Quit → Exit application
    """

    def __init__(self, screen_manager):
        super().__init__()
        self.screen_manager = screen_manager
        self.audio = get_audio_manager()

        # Star tunnel
        self.stars: List[Star] = []
        self.time_elapsed = 0.0

        # UI elements
        self.ui_elements = []
        self.how_to_play_overlay = None

        # Initialize
        self._create_stars()
        self._create_ui()

        # Initially hidden
        self.enabled = False

        print("✓ MainMenu3D initialized")

    def _create_stars(self):
        """Create star tunnel with 300 stars"""
        print("Creating star tunnel...")
        num_stars = 300  # Conservative count for performance

        for _ in range(num_stars):
            star = Star()
            self.stars.append(star)

        print(f"✓ Created {num_stars} stars")

    def _create_ui(self):
        """Create UI overlay elements"""
        # Title
        title = Text(
            text="CLAUDE-LIKE",
            position=(0, 0.40),
            origin=(0, 0),
            scale=3.5,
            color=color.rgb(200, 180, 255),
            parent=camera.ui
        )
        self.ui_elements.append(title)

        # Subtitle
        subtitle = Text(
            text="A Roguelike Adventure",
            position=(0, 0.32),
            origin=(0, 0),
            scale=1.3,
            color=color.rgb(150, 150, 160),
            parent=camera.ui
        )
        self.ui_elements.append(subtitle)

        # Buttons
        button_y = 0.08
        button_spacing = 0.12

        # New Game button
        new_game_btn = Button(
            text="New Game",
            scale=(0.28, 0.08),
            position=(0, button_y),
            color=color.rgb(60, 120, 60),
            text_color=color.white,
            parent=camera.ui,
            on_click=self._on_new_game
        )
        self.ui_elements.append(new_game_btn)

        # How to Play button
        how_to_play_btn = Button(
            text="How to Play",
            scale=(0.28, 0.08),
            position=(0, button_y - button_spacing),
            color=color.rgb(80, 80, 100),
            text_color=color.white,
            parent=camera.ui,
            on_click=self._on_how_to_play
        )
        self.ui_elements.append(how_to_play_btn)

        # Settings button
        settings_btn = Button(
            text="Settings",
            scale=(0.28, 0.08),
            position=(0, button_y - button_spacing * 2),
            color=color.rgb(100, 80, 120),
            text_color=color.white,
            parent=camera.ui,
            on_click=self._on_settings
        )
        self.ui_elements.append(settings_btn)

        # Quit button
        quit_btn = Button(
            text="Quit",
            scale=(0.28, 0.08),
            position=(0, button_y - button_spacing * 3),
            color=color.rgb(120, 60, 60),
            text_color=color.white,
            parent=camera.ui,
            on_click=self._on_quit
        )
        self.ui_elements.append(quit_btn)

    def _on_new_game(self):
        """Handle New Game click"""
        self.audio.play_ui_select()
        print("[MainMenu] New Game clicked")
        from ui.screens.screen_manager_3d import ScreenState
        self.screen_manager.change_screen(ScreenState.CLASS_SELECTION)

    def _on_how_to_play(self):
        """Handle How to Play click"""
        self.audio.play_ui_select()
        print("[MainMenu] How to Play clicked")
        self._show_how_to_play_overlay()

    def _on_settings(self):
        """Handle Settings click"""
        self.audio.play_ui_select()
        print("[MainMenu] Settings clicked")
        from ui.screens.screen_manager_3d import ScreenState
        self.screen_manager.change_screen(ScreenState.SETTINGS)

    def _on_quit(self):
        """Handle Quit click"""
        self.audio.play_ui_select()
        print("[MainMenu] Quit clicked")
        self.screen_manager.quit_game()

    def _show_how_to_play_overlay(self):
        """Show How to Play instructions overlay"""
        if self.how_to_play_overlay:
            return  # Already showing

        # Semi-transparent dark overlay
        overlay_bg = Entity(
            model='quad',
            color=(0, 0, 0, 0.85),
            scale=(100, 100),
            position=(0, 0, -0.5),
            parent=camera.ui
        )

        # Title
        title = Text(
            text="HOW TO PLAY",
            position=(0, 0.38),
            origin=(0, 0),
            scale=2.5,
            color=color.rgb(220, 220, 230),
            parent=camera.ui
        )

        # Instructions (condensed)
        instructions = Text(
            text=(
                "OBJECTIVE: Conquer all 25 levels!\n"
                "\n"
                "CONTROLS:\n"
                "WASD / Arrow Keys - Move\n"
                "1/2/3 - Use abilities (click to target)\n"
                "ESC - Pause / Cancel targeting\n"
                "\n"
                "GAMEPLAY:\n"
                "- Bump into enemies to attack\n"
                "- Find stairs (purple) to descend\n"
                "- Collect equipment to boost stats\n"
                "- Level up by defeating enemies\n"
                "\n"
                "Press ESC or click to close"
            ),
            position=(0, 0.05),
            origin=(0, 0),
            scale=1.0,
            color=color.rgb(200, 200, 200),
            parent=camera.ui
        )

        # Close button
        close_btn = Button(
            text="Close",
            scale=(0.2, 0.08),
            position=(0, -0.40),
            color=color.rgb(100, 100, 150),
            text_color=color.white,
            parent=camera.ui,
            on_click=self._hide_how_to_play_overlay
        )

        # Store references
        self.how_to_play_overlay = {
            'bg': overlay_bg,
            'title': title,
            'text': instructions,
            'button': close_btn
        }

    def _hide_how_to_play_overlay(self):
        """Hide How to Play overlay"""
        if not self.how_to_play_overlay:
            return

        self.audio.play_ui_select()

        # Destroy all overlay elements
        for element in self.how_to_play_overlay.values():
            if element:
                destroy(element)

        self.how_to_play_overlay = None

    def update(self):
        """Update animations"""
        if not self.enabled:
            return

        dt = ursina_time.dt
        self.time_elapsed += dt

        # Update star tunnel
        for star in self.stars:
            star.update(dt)

        # ESC key closes How to Play overlay
        from ursina import held_keys
        if held_keys['escape'] and self.how_to_play_overlay:
            self._hide_how_to_play_overlay()

    def show(self):
        """Show the main menu"""
        self.enabled = True

        # Show all UI elements
        for element in self.ui_elements:
            element.enabled = True

        # Show stars
        for star in self.stars:
            if star.entity:
                star.entity.enabled = True

        # Position camera
        camera.position = Vec3(0, 0, 8)
        camera.rotation = (0, 0, 0)

        print("[MainMenu] Main menu shown")

    def hide(self):
        """Hide the main menu"""
        self.enabled = False

        # Hide all UI elements
        for element in self.ui_elements:
            element.enabled = False

        # Hide stars
        for star in self.stars:
            if star.entity:
                star.entity.enabled = False

        # Hide How to Play overlay if showing
        if self.how_to_play_overlay:
            self._hide_how_to_play_overlay()

        print("[MainMenu] Main menu hidden")

    def cleanup(self):
        """Clean up all resources"""
        # Destroy stars
        for star in self.stars:
            star.destroy_entity()
        self.stars.clear()

        # Destroy UI elements
        for element in self.ui_elements:
            destroy(element)
        self.ui_elements.clear()

        print("[MainMenu] Cleaned up")
